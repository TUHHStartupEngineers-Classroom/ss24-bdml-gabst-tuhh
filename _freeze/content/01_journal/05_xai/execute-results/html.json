{
  "hash": "8d1203973140f5ccbd6da7ecc697df7d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Explaining Blackbox Models with LIME\"\ndate: \"06/20/2024\"\nauthor: \"Gabriel Storch\"\noutput: \n    html_document:\n        toc: TRUE\n        theme: flatly\n        highlight: tango\n        code_folding: hide\n        df_print: paged\neditor: \n  markdown: \n    wrap: 72\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressWarnings(\n  {\n    library(readr)\nlibrary(h2o)\nlibrary(recipes)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(lime)\nlibrary(rsample)\n  }\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nemployee_attrition_readable_tbl <- read_csv(\"C:/Projekte/bdml/employee_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Rows: 1470 Columns: 35\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#> dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl  <- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%\n                step_zv(all_predictors()) %>%\n                step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %>% \n                prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nh2o.init()\n\ntrain_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)[[1]]\nvalid_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\nresponse <- \"Attrition\"\n\npredictors <-  setdiff(names(train_h2o), response)\n\nautoml_models_h2o <- h2o.automl(\n  x = predictors,\n  y = response,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  nfolds            = 5,\n  max_runtime_secs = 30\n)\nldr <- automl_models_h2o@leader\npredictions_tbl <- ldr  %>% \n    h2o.predict(newdata = as.h2o(test_tbl)) %>%\n    as_tibble() %>%\n    bind_cols(\n        test_tbl %>%\n            select(Attrition, EmployeeNumber)\n    )\n# to be able to plot without the h2o stuff running\nwrite_csv(predictions_tbl, \"predictions.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npreds <- read.csv(\"predictions.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexplainer <- train_tbl %>%\n    select(-Attrition) %>%\n    lime(\n        model           = ldr,\n        bin_continuous  = TRUE,\n        n_bins          = 4,\n        quantile_bins   = TRUE\n    )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexplanation <- test_tbl %>%\n    slice(1) %>%\n    select(-Attrition) %>%\n    lime::explain(\n    \n        # Pass our explainer object\n        explainer = explainer,\n        # Because it is a binary classification model: 1\n        n_labels   = 1,\n        # number of features to be returned\n        n_features = 8,\n        # number of localized linear models\n        n_permutations = 5000,\n        # Let's start with 1\n        kernel_width   = 1\n    )\n\nwrite_csv(explanation, \"explanation.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexplanation <- read.csv(\"explanation.csv\")\n```\n:::\n\n\n\n# recreate plot features \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_features <- function(explanation) {\n    explanation %>%\n        ggplot(aes(x = reorder(feature, feature_weight), y = feature_weight)) +\n        geom_bar(stat = 'identity') +\n        coord_flip() +\n        labs(title = \"Feature Importance\", x = \"Feature\", y = \"Importance\") +\n        theme_minimal()\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncase_1 <- explanation %>%\n    filter(case == 1)\n\ncase_1 %>%\n    plot_features()\n```\n\n::: {.cell-output-display}\n![](05_xai_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n# recreate plot explanations \n\n::: {.cell}\n\n```{.r .cell-code}\nplot_explanations <- function(explanations) {\n  explanations %>%\n    mutate(\n      case = as.factor(case)\n    ) %>%\n    ggplot(aes(x = case, y = reorder(feature_desc, abs(feature_weight)), fill = feature_weight)) +\n    geom_tile() +\n    facet_grid(~ label) +\n    scale_fill_gradient2(low = \"red\", high = \"green\", mid = \"white\", midpoint = 0) +\n    labs(title = \"Feature Importance by Case\",\n         x = \"Case\",\n         y = \"Feature = Value\") +\n    theme_minimal() +\n    theme(\n      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n      panel.spacing = unit(1, \"lines\")\n    )\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n?lime::plot_explanations\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> starting httpd help server ... done\n```\n\n\n:::\n\n```{.r .cell-code}\nexplanation %>%\n    plot_explanations()\n```\n\n::: {.cell-output-display}\n![](05_xai_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}