[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "ML Fundamentals",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "ML Fundamentals",
    "section": "2.1 Header 2",
    "text": "2.1 Header 2\n\nHeader 3\n\nHeader 4\n\nHeader 5\n\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/01_MachineLearningFundamentals.html",
    "href": "content/01_journal/01_MachineLearningFundamentals.html",
    "title": "Machine Learning Fundamentals: Company Segmentation",
    "section": "",
    "text": "Challenge Summary\nYour organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns.\nObjectives\nApply your knowledge on K-Means and UMAP along with dplyr, ggplot2, and purrr to create a visualization that identifies subgroups in the S&P 500 Index. You will specifically apply:\nModeling: kmeans() and umap()\nIteration: purrr\nData Manipulation: dplyr, tidyr, and tibble\nVisualization: ggplot2 (bonus plotly)\nLibraries\nLoad the following libraries.\n{r}\n\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\n#&gt; Loading required package: PerformanceAnalytics\n#&gt; Loading required package: xts\n#&gt; Loading required package: zoo\n#&gt; \n#&gt; Attaching package: 'zoo'\n#&gt; \n#&gt; The following objects are masked from 'package:base':\n#&gt; \n#&gt;     as.Date, as.Date.numeric\n#&gt; \n#&gt; \n#&gt; ######################### Warning from 'xts' package ##########################\n#&gt; #                                                                             #\n#&gt; # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#&gt; # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#&gt; # source() into this session won't work correctly.                            #\n#&gt; #                                                                             #\n#&gt; # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#&gt; # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#&gt; # dplyr from breaking base R's lag() function.                                #\n#&gt; #                                                                             #\n#&gt; # Code in packages is not affected. It's protected by R's namespace mechanism #\n#&gt; # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#&gt; #                                                                             #\n#&gt; ###############################################################################\n#&gt; \n#&gt; Attaching package: 'xts'\n#&gt; \n#&gt; The following objects are masked from 'package:dplyr':\n#&gt; \n#&gt;     first, last\n#&gt; \n#&gt; \n#&gt; Attaching package: 'PerformanceAnalytics'\n#&gt; \n#&gt; The following object is masked from 'package:graphics':\n#&gt; \n#&gt;     legend\n#&gt; \n#&gt; Loading required package: quantmod\n#&gt; Loading required package: TTR\n#&gt; Registered S3 method overwritten by 'quantmod':\n#&gt;   method            from\n#&gt;   as.zoo.data.frame zoo\n\nlibrary(broom)\nlibrary(umap)\n\nData\nWe will be using stock prices in this analysis. Although some of you know already how to use an API to retrieve stock prices I obtained the stock prices for every stock in the S&P 500 index for you already. The files are saved in the session_6_data directory.\nWe can read in the stock prices. The data is 1.2M observations. The most important columns for our analysis are:\nsymbol: The stock ticker symbol that corresponds to a company’s stock price\ndate: The timestamp relating the symbol to the share price at that point in time\nadjusted: The stock price, adjusted for any splits and dividends (we use this when analyzing stock data over long periods of time)\n\n# STOCK PRICES\nsp_500_prices_tbl &lt;- readRDS(\"C:/Projekte/bdml/sp_500_prices_tbl.rds\")\nsp_500_prices_tbl\n\n\n  \n\n\n\nThe second data frame contains information about the stocks the most important of which are:\ncompany: The company name\nsector: The sector that the company belongs to\n\n# SECTOR INFORMATION\nsp_500_index_tbl &lt;- read_rds(\"C:/Projekte/bdml/sp_500_index_tbl.rds\")\nsp_500_index_tbl\n\n\n  \n\n\n\nQuestion\nWhich stock prices behave similarly?\nAnswering this question helps us understand which companies are related, and we can use clustering to help us answer it!\nEven if you’re not interested in finance, this is still a great analysis because it will tell you which companies are competitors and which are likely in the same space (often called sectors) and can be categorized together. Bottom line - This analysis can help you better understand the dynamics of the market and competition, which is useful for all types of analyses from finance to sales to marketing.\nLet’s get started.\nStep 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n{r} sp_500_prices_tbl %&gt;% glimpse()\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n{r} # Apply your data transformation skills!\n\n1 Output: sp_500_daily_returns_tbl\nStep 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n{r} sp_500_daily_returns_tbl &lt;- read_rds(“sp_500_daily_returns_tbl.rds”) sp_500_daily_returns_tbl\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n{r} # Convert to User-Item Format\n\n\n2 Output: stock_date_matrix_tbl\nStep 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n{r} stock_date_matrix_tbl &lt;- read_rds(“stock_date_matrix_tbl.rds”)\nBeginning with the stock_date_matrix_tbl, perform the following operations:\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n{r} # Create kmeans_obj for 4 centers\nUse glance() to get the tot.withinss.\n{r} # Apply glance() to get the tot.withinss\nStep 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n{r} kmeans_mapper &lt;- function(center = 3) { stock_date_matrix_tbl %&gt;% select(-symbol) %&gt;% kmeans(centers = center, nstart = 20) }\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n{r} # Use purrr to map\n\n\n3 Output: k_means_mapped_tbl\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n{r} # Visualize Scree Plot\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K.\nStep 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n{r} k_means_mapped_tbl &lt;- read_rds(“k_means_mapped_tbl.rds”)\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n{r} # Apply UMAP\n\n\n4 Store results as: umap_results\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n{r} # Convert umap results to tibble with symbols\n\n\n5 Output: umap_results_tbl\nFinally, let’s make a quick visualization of the umap_results_tbl.\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n{r} # Visualize UMAP results\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation.\nStep 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n{r} k_means_mapped_tbl &lt;- read_rds(“k_means_mapped_tbl.rds”) umap_results_tbl &lt;- read_rds(“umap_results_tbl.rds”)\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n{r} # Get the k_means_obj from the 10th center\n\n\n6 Store as k_means_obj\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n{r} # Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n7 Output: umap_kmeans_results_tbl\nPlot the K-Means and UMAP results.\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n{r} # Visualize the combined K-Means and UMAP results\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/01_Fundamentals.html",
    "href": "content/01_journal/01_Fundamentals.html",
    "title": "Machine Learning Fundamentals: Company Segmentation",
    "section": "",
    "text": "Challenge Summary\nYour organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns.\nObjectives\nApply your knowledge on K-Means and UMAP along with dplyr, ggplot2, and purrr to create a visualization that identifies subgroups in the S&P 500 Index. You will specifically apply:\nModeling: kmeans() and umap()\nIteration: purrr\nData Manipulation: dplyr, tidyr, and tibble\nVisualization: ggplot2 (bonus plotly)\nLibraries\n\nsuppressWarnings(\n  {\n    library(tidyverse)\n    library(tidyquant)\n    library(broom)\n    library(umap)\n    \n  }\n)\n\nData\nWe will be using stock prices in this analysis. Although some of you know already how to use an API to retrieve stock prices I obtained the stock prices for every stock in the S&P 500 index for you already. The files are saved in the session_6_data directory.\nWe can read in the stock prices. The data is 1.2M observations. The most important columns for our analysis are:\nsymbol: The stock ticker symbol that corresponds to a company’s stock price\ndate: The timestamp relating the symbol to the share price at that point in time\nadjusted: The stock price, adjusted for any splits and dividends (we use this when analyzing stock data over long periods of time)\n\n# STOCK PRICES\nsp_500_prices_tbl &lt;- readRDS(\"C:/Projekte/bdml/sp_500_prices_tbl.rds\")\nsp_500_prices_tbl\n\n\n  \n\n\n\nThe second data frame contains information about the stocks the most important of which are:\ncompany: The company name\nsector: The sector that the company belongs to\n\n# SECTOR INFORMATION\nsp_500_index_tbl &lt;- read_rds(\"C:/Projekte/bdml/sp_500_index_tbl.rds\")\nsp_500_index_tbl\n\n\n  \n\n\n\nQuestion\nWhich stock prices behave similarly?\nAnswering this question helps us understand which companies are related, and we can use clustering to help us answer it!\nEven if you’re not interested in finance, this is still a great analysis because it will tell you which companies are competitors and which are likely in the same space (often called sectors) and can be categorized together. Bottom line - This analysis can help you better understand the dynamics of the market and competition, which is useful for all types of analyses from finance to sales to marketing.\nLet’s get started.\nStep 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl |&gt; glimpse()\n\n#&gt; Rows: 1,225,765\n#&gt; Columns: 8\n#&gt; $ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#&gt; $ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#&gt; $ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#&gt; $ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#&gt; $ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#&gt; $ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#&gt; $ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#&gt; $ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;% \n  # Select the symbol, date and adjusted columns\n  select(symbol, date, adjusted) %&gt;%\n  # Filter to dates beginning in the year 2018 and beyond\n  filter(date &gt;= \"2018-01-01\") %&gt;%\n  # Group by symbol\n  group_by(symbol) %&gt;%\n  # Compute 1 day lag\n  mutate(lag_1_d = lag(adjusted)) %&gt;%\n  # Remove NA values\n  filter(!is.na(lag_1_d)) %&gt;%\n  # Compute difference between adj and lag\n  mutate(diff = adjusted - lag_1_d) %&gt;%\n  # Compute the percentage difference\n  mutate(pct_return = diff / lag_1_d) %&gt;% \n  # Ungroup\n  ungroup() %&gt;%\n  # Select only relevant columns\n  select(symbol, date, pct_return) \n  # Output: sp_500_daily_returns_tbl\n  sp_500_daily_returns_tbl\n\n\n  \n\n\n\nStep 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\no_sp_500_daily_returns_tbl &lt;- read_rds(\"C:/Projekte/bdml/sp_500_daily_returns_tbl.rds\") \n# I was able to correctly complete the last step:\nall(sp_500_daily_returns_tbl == o_sp_500_daily_returns_tbl)\n\n#&gt; [1] TRUE\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  # Select the symbol, date and pct_return columns\n  select(symbol, date, pct_return) %&gt;%\n  # Spread the date column to get the values as percentage returns\n  spread(key = date, value = pct_return) %&gt;%\n  # Fill NA values with zeros\n  replace(is.na(.), 0)\n# Output: stock_date_matrix_tbl\nstock_date_matrix_tbl\n\n\n  \n\n\n\nStep 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl1 &lt;- read_rds(\"C:/Projekte/bdml/stock_date_matrix_tbl.rds\")\n# Assert we got it all right\nall(stock_date_matrix_tbl1 == stock_date_matrix_tbl)\n\n#&gt; [1] TRUE\n\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n # Create kmeans_obj for 4 centers\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;% \n  # Drop nun-numeric col\n  select(-symbol) %&gt;% \n  # Perform Kmeans\n  kmeans(centers=4, nstart=20)\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nwithinss &lt;- glance(kmeans_obj)[[\"tot.withinss\"]]\nwithinss\n\n#&gt; [1] 29.20555\n\n\nStep 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) { \n  stock_date_matrix_tbl %&gt;% \n    select(-symbol) %&gt;% \n    kmeans(centers = center, nstart = 20) \n  }\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\nk_means_mapped_tbl &lt;- tibble(centers=1:30) %&gt;%\n  mutate(k_means=map(centers, kmeans_mapper)) %&gt;%\n  mutate(glance = map(k_means, glance))\n# Output: k_means_mapped_tbl\nk_means_mapped_tbl\n\n\n  \n\n\n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nplt_tbl &lt;- k_means_mapped_tbl %&gt;% unnest(glance)\n\nggplot(plt_tbl, aes(x = centers, y = tot.withinss)) +\n  geom_point() +  \n  geom_line() +\n  labs(x = \"Centers\", y = \"Total Within SS\") +  \n  ggtitle(\"Scree Plot\") \n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K.\nStep 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"C:/Projekte/bdml/k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP, Store results as: umap_results\numap_results &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  umap()\n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- umap_results$layout %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(stock_date_matrix_tbl$symbol) %&gt;%\n  rename(symbol = ...3)\n\n#&gt; Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#&gt; `.name_repair` is omitted as of tibble 2.0.0.\n#&gt; ℹ Using compatibility `.name_repair`.\n\n\n#&gt; New names:\n#&gt; • `` -&gt; `...3`\n\n# Output: umap_results_tbl\numap_results_tbl\n\n\n  \n\n\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n # Visualize UMAP results\numap_results_tbl %&gt;%\n  # x = V1, y = V2\n  ggplot(aes(x = V1, y = V2)) +\n  # transparent points\n  geom_point(alpha = 0.5) + \n  theme_tq() +\n  labs(title = \"UMAP Projection\") \n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation.\nStep 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\n\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\n\nk_means_mapped_tbl &lt;- read_rds(\"C:/Projekte/bdml/k_means_mapped_tbl.rds\") \numap_results_tbl &lt;- read_rds(\"C:/Projekte/bdml/umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center, store as k_means_obj\nk_means_obj &lt;- k_means_mapped_tbl[which(k_means_mapped_tbl$centers == 10),]$k_means\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n# augment(k_means_obj, data = stock_date_matrix_tbl)\n# Error: No augment method for objects of class list\n# ~&gt; unfortunately the k means object is not recognized as such by augment, so i do a work-around\n\numap_kmeans_results_tbl &lt;- k_means_obj[[1]]$cluster %&gt;%\n  # merge cluster info w/ stock date matrix\n  as.tibble() %&gt;%\n  bind_cols(stock_date_matrix_tbl) %&gt;%\n  rename(.cluster = value) %&gt;%\n  # projecting to cluster and symbol\n  select(.cluster, symbol) %&gt;%\n  # left join with umap res on symbol\n  left_join(umap_results_tbl, by=\"symbol\") %&gt;%\n  # enrich with sp_500_index_tbl info\n  left_join(sp_500_index_tbl %&gt;% \n              select(symbol, company, sector),\n            by = \"symbol\")\n\n#&gt; Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\n# Output: umap_kmeans_results_tbl\numap_kmeans_results_tbl\n\n\n  \n\n\n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %&gt;%  \n  # x = V1, y = V2\n  ggplot(aes(x = V1, y = V2, color = .cluster)) +\n  # transparent points\n  geom_point(alpha = 0.5) + \n  theme_tq() +\n  labs(title = \"UMAP Projection\") \n\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/05_xai.html",
    "href": "content/01_journal/05_xai.html",
    "title": "Explaining Blackbox Models with LIME",
    "section": "",
    "text": "suppressWarnings(\n  {\n    library(readr)\nlibrary(h2o)\nlibrary(recipes)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(lime)\nlibrary(rsample)\n  }\n)\n\n\nemployee_attrition_readable_tbl &lt;- read_csv(\"C:/Projekte/bdml/employee_data.csv\")\n\n#&gt; Rows: 1470 Columns: 35\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#&gt; dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj &lt;- recipe(Attrition ~ ., data = train_readable_tbl) %&gt;%\n                step_zv(all_predictors()) %&gt;%\n                step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %&gt;% \n                prep()\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n\nh2o.init()\n\ntrain_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)[[1]]\nvalid_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\nresponse &lt;- \"Attrition\"\n\npredictors &lt;-  setdiff(names(train_h2o), response)\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = predictors,\n  y = response,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  nfolds            = 5,\n  max_runtime_secs = 30\n)\nldr &lt;- automl_models_h2o@leader\npredictions_tbl &lt;- ldr  %&gt;% \n    h2o.predict(newdata = as.h2o(test_tbl)) %&gt;%\n    as_tibble() %&gt;%\n    bind_cols(\n        test_tbl %&gt;%\n            select(Attrition, EmployeeNumber)\n    )\n# to be able to plot without the h2o stuff running\nwrite_csv(predictions_tbl, \"predictions.csv\")\n\n\npreds &lt;- read.csv(\"predictions.csv\")\n\n\nexplainer &lt;- train_tbl %&gt;%\n    select(-Attrition) %&gt;%\n    lime(\n        model           = ldr,\n        bin_continuous  = TRUE,\n        n_bins          = 4,\n        quantile_bins   = TRUE\n    )\n\n\nexplanation &lt;- test_tbl %&gt;%\n    slice(1) %&gt;%\n    select(-Attrition) %&gt;%\n    lime::explain(\n    \n        # Pass our explainer object\n        explainer = explainer,\n        # Because it is a binary classification model: 1\n        n_labels   = 1,\n        # number of features to be returned\n        n_features = 8,\n        # number of localized linear models\n        n_permutations = 5000,\n        # Let's start with 1\n        kernel_width   = 1\n    )\n\nwrite_csv(explanation, \"explanation.csv\")\n\n\nexplanation &lt;- read.csv(\"explanation.csv\")\n\n\n1 recreate plot features\n\nplot_features &lt;- function(explanation) {\n    explanation %&gt;%\n        ggplot(aes(x = reorder(feature, feature_weight), y = feature_weight)) +\n        geom_bar(stat = 'identity') +\n        coord_flip() +\n        labs(title = \"Feature Importance\", x = \"Feature\", y = \"Importance\") +\n        theme_minimal()\n}\n\n\ncase_1 &lt;- explanation %&gt;%\n    filter(case == 1)\n\ncase_1 %&gt;%\n    plot_features()\n\n\n\n\n\n\n\n\n\n\n2 recreate plot explanations\n\nplot_explanations &lt;- function(explanations) {\n  explanations %&gt;%\n    mutate(\n      case = as.factor(case)\n    ) %&gt;%\n    ggplot(aes(x = case, y = reorder(feature_desc, abs(feature_weight)), fill = feature_weight)) +\n    geom_tile() +\n    facet_grid(~ label) +\n    scale_fill_gradient2(low = \"red\", high = \"green\", mid = \"white\", midpoint = 0) +\n    labs(title = \"Feature Importance by Case\",\n         x = \"Case\",\n         y = \"Feature = Value\") +\n    theme_minimal() +\n    theme(\n      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),\n      panel.spacing = unit(1, \"lines\")\n    )\n}\n\n\n?lime::plot_explanations\n\n#&gt; starting httpd help server ... done\n\nexplanation %&gt;%\n    plot_explanations()"
  },
  {
    "objectID": "content/01_journal/03_Automated_ML.html",
    "href": "content/01_journal/03_Automated_ML.html",
    "title": "Automated ML",
    "section": "",
    "text": "library(tidyverse)\nlibrary(GGally)\nlibrary(h2o)\nlibrary(rsample)\nlibrary(cowplot)\nlibrary(glue)\n\nReading data for analysis\n\nemployee_attrition_tbl &lt;- read_csv(\"C:/Projekte/bdml/employee_data.csv\")\n\n#&gt; Rows: 1470 Columns: 35\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#&gt; dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nemployee_attrition_tbl %&gt;%\n    select(Attrition, MonthlyIncome, PercentSalaryHike, StockOptionLevel, EnvironmentSatisfaction, WorkLifeBalance, JobInvolvement, OverTime, TrainingTimesLastYear, YearsAtCompany, YearsSinceLastPromotion) %&gt;%\n    ggpairs(aes(color = Attrition), lower = \"blank\", legend = 1,\n            diag  = list(continuous = wrap(\"densityDiag\", alpha = 0.5))) +\n    theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nI present the asnwers by Number. Answer\n1.Those that are leaving have a lower Monthly Income.\n\nIt’s difficult to deduce anything based on the visualization.\nThose that are staying have a higher stock option level. This is not true for the highest stock option level tho.\nA higher proportion of those leaving have a low environment satisfaction level\nThose that are staying have a higher density of 2’s and 3’s\nThose that are leaving have a lower density of 3’s and 4’s\nThe proportion of those leaving that are working Over Time are high compared to those that are not leaving. (roughly 50% of those who are leaving are doing OT, vs ~25% for stayers)\nIt’s difficult to deduce anything based on the visualization.\nPeople that leave tend to have less working years at the company\nIt’s difficult to deduce anything based on the visualization"
  },
  {
    "objectID": "content/01_journal/02_Supervised.html",
    "href": "content/01_journal/02_Supervised.html",
    "title": "Supervised Machine Learning",
    "section": "",
    "text": "# Standard\nlibrary(tidyverse)\n\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\nlibrary(workflows)\nlibrary(parsnip)\n\n\nbike_features_tbl &lt;- readRDS(\"C:/Projekte/bdml/bike_features_tbl.rds\") %&gt;% select(model:url)\nsplit_obj &lt;- initial_split(bike_features_tbl, prop = 0.8, strata=\"category_2\") \n\n\ntrain_tbl &lt;- training(split_obj)\ntest_tbl &lt;- testing(split_obj)\n\ntrain_tbl &lt;- train_tbl %&gt;% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  &lt;- test_tbl  %&gt;% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n\n\n1 Problem definition\nWhich Bike Categories are in high demand? Which Bike Categories are under represented? # Goal\nUse a pricing algorithm to determine a new product price in a category gap\nI. Build a model\n\nLM &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\")\n\n\nCreate features with the recipes package\n\n\nrecipe_obj &lt;- recipe(price ~ ., data = train_tbl) %&gt;% \n                step_rm(url) %&gt;% \n                step_dummy(all_nominal(), one_hot = TRUE ) %&gt;%\n  step_scale(all_numeric(), -all_outcomes())\n\n\nBundle the model and recipe with the workflow package\n\n\nwf &lt;- workflow() %&gt;%\n   # Add the recipe to the workflow\n  add_recipe(recipe_obj) %&gt;% \n  # add model\n  add_model(LM) %&gt;%\n  # train model\n  fit(data = train_tbl)\n\n\nEvaluate your model with the yardstick package\n\n\ncount &lt;- 0\ncalc_metrics &lt;- function(model, model_type = count, new_data = test_tbl) {\n    count &lt;- count + 1\n\n    res &lt;- model %&gt;%\n        predict(new_data = new_data) %&gt;%\n\n        bind_cols(new_data %&gt;% select(price)) %&gt;%\n        yardstick::metrics(truth = price, estimate = .pred) \n\n    res &lt;- res %&gt;% mutate(.estimator = model_type)\n\n  \n    return (res)\n\n}\ncalc_metrics(wf, new_data = test_tbl)\n\n#&gt; Warning: ! There are new levels in a factor: `Aeroad CF SL Disc 8.0 ETAP`, `Aeroad WMN\n#&gt;   CF SL 8.0`, `Endurace AL 6.0`, `Endurace WMN AL 6.0`, `Endurace CF 8.0`,\n#&gt;   `Speedmax CF SLX 9.0 LTD`, `Speedmax CF SLX 9.0 SL`, `Ultimate CF SLX Disc\n#&gt;   9.0 Di2`, `Ultimate WMN CF SLX Disc 9.0 ETAP`, `Ultimate WMN CF SL Disc 8.0\n#&gt;   ETAP`, `Ultimate WMN CF SL Disc 7.0`, `Ultimate CF SL 7.0`, `Ultimate CF SLX\n#&gt;   Disc 9.0 Team Movistar`, `Ultimate CF SL Disc 8.0 Di2`, `Ultimate CF SL Disc\n#&gt;   7.0`, `Exceed CF SLX 8`, `Exceed CF SLX 9.0`, `Grail CF SLX 8 Di2`, …,\n#&gt;   `Roadlite 5`, and `Roadlite AL 7.0`.\n\n\n#&gt; Warning in predict.lm(object = object$fit, newdata = new_data, type =\n#&gt; \"response\", : prediction from rank-deficient fit; consider predict(.,\n#&gt; rankdeficient=\"NA\")\n\n\n\n  \n\n\n\nV. Comparing two models in the pipeline: make pipeline into function:\n\nrun_complete_pipe &lt;- function(model, model_type,  recipe = recipe_obj, train_data = train_tbl, test_data = test_tbl) {\n  wf &lt;- workflow() %&gt;%\n   # Add the recipe to the workflow\n  add_recipe(recipe) %&gt;% \n  # add model\n  add_model(model) %&gt;%\n  # train model\n  fit(data = train_data)\n  # evaluate model\n  metrics &lt;- calc_metrics(wf, model_type,  test_data)\n  return (metrics)\n}\n\nmake for loop wrapper for pipe function:\n\ncompare_results &lt;- function(models) {\n  results &lt;- list()\nfor (mod in models) {\n  results[[length(results) + 1]] &lt;- run_complete_pipe(mod, mod$engine, recipe_obj, train_tbl, test_tbl)\n}\n\nresults_combined &lt;- bind_rows(\n  map_dfr(results, ~ {\n    tibble(\n      model_type = .x$.estimator,\n      rmse = filter(.x, .metric == \"rmse\")$.estimate[1],\n      rsq = filter(.x, .metric == \"rsq\")$.estimate[1],\n      mae = filter(.x, .metric == \"mae\")$.estimate[1]\n    )\n  })\n) %&gt;%\n  distinct()\n\nresults_combined\n}\n\nDefine some models and run the comparison\n\nXGBOOST &lt;-  boost_tree(\n  mode = \"regression\",\n  trees = 200,         \n  learn_rate = 0.01,\n  loss_reduction = 0.01\n) %&gt;%\n  set_engine(\"xgboost\")\n\nGLMNET &lt;- linear_reg(mode  = \"regression\", \n                     penalty = 10, \n                     mixture = 0.1) %&gt;%\n                     set_engine(\"glmnet\")\n\nmodels &lt;- list(LM, XGBOOST, GLMNET)\n\nsuppressWarnings(\n  compare_results(models)\n)\n\n\n  \n\n\n\nSeems like GLM net produces the lowest errors."
  },
  {
    "objectID": "content/01_journal/04_performance.html",
    "href": "content/01_journal/04_performance.html",
    "title": "Performance Measures",
    "section": "",
    "text": "See Automated ML"
  },
  {
    "objectID": "content/01_journal/03_Automated_ML.html#grid-search-tuning",
    "href": "content/01_journal/03_Automated_ML.html#grid-search-tuning",
    "title": "Automated ML",
    "section": "3.1 Grid Search Tuning",
    "text": "3.1 Grid Search Tuning\nMaybe I can squeeze half a percent more out of my best GBM (stackedensemble cant be used in grid search in h2o):\n\nmodel &lt;- h2o.getModel(\"GBM_grid_1_AutoML_14_20240620_131005_model_20\")\nh2o.performance(model, test_h2o)"
  },
  {
    "objectID": "content/01_journal/03_Automated_ML.html#grid-search",
    "href": "content/01_journal/03_Automated_ML.html#grid-search",
    "title": "Automated ML",
    "section": "3.2 grid search",
    "text": "3.2 grid search\n\nensemble_grid &lt;- h2o.grid(algorithm = \"gbm\",\n                          grid_id = \"gbmgrid\",\n                          x=predictors, y = response, training_frame = train_h2o, validation_frame = valid_h2o, nfolds = 5,\n                          hyper_params = list(ntrees = list(50, 100, 125, 200),\n                                              max_depth = list(8, 10, 15, 20),\n                                              min_rows = list(2, 5, 10, 20),\n                                              sample_rate= list(0.5, 0.75)\n                            )\n                          )\n \n \n#max_depth min_rows ntrees sample_rate model_ids logloss\n#&lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n#228    20.00000    2.00000 125.00000   0.75000 gbmgrid_model_221   0.31673\n#229    15.00000    2.00000 200.00000   0.50000 gbmgrid_model_172   0.31903\n#230    20.00000    5.00000 200.00000   0.75000 gbmgrid_model_241   0.32009\n#231    15.00000    2.00000 200.00000   0.75000 gbmgrid_model_236   0.35177\n#232    20.00000    2.00000 200.00000   0.50000 gbmgrid_model_173   0.40970\n#233    20.00000    2.00000 200.00000   0.75000 gbmgrid_model_237   0.44275\n\nLooks like the model automl returned was already achieving better log loss than my tuning attempt."
  },
  {
    "objectID": "content/01_journal/03_Automated_ML.html#roc-plot-precision-recall-plot",
    "href": "content/01_journal/03_Automated_ML.html#roc-plot-precision-recall-plot",
    "title": "Automated ML",
    "section": "3.3 roc plot, precision + recall plot",
    "text": "3.3 roc plot, precision + recall plot\ndefining functions for everything..\n\nplot_roc &lt;- function(model_metrics_tbl, order_by, size = 1.5) {\n  order_by_expr &lt;- rlang::sym(order_by)\n  model_metrics_tbl %&gt;%\n        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n        theme(legend.direction = \"vertical\") \n}\n\nplot_prec_rec &lt;- function(model_metrics_tbl, order_by, size = 1.5) {\n    order_by_expr &lt;- rlang::sym(order_by)\n  model_metrics_tbl %&gt;%\n        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n        theme(legend.position = \"none\") \n}\n\nplot_gain &lt;- function(gain_lift_tbl, order_by, size = 1.5) {\n    order_by_expr &lt;- rlang::sym(order_by)\n    gain_lift_tbl %&gt;%\n        ggplot(aes(cumulative_data_fraction, gain, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size,) +\n        geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Gain\",\n             x = \"Cumulative Data Fraction\", y = \"Gain\") +\n        theme(legend.position = \"none\")\n}\n\nplot_lift &lt;- function(gain_lift_tbl, order_by, size = 1.5) {\n      order_by_expr &lt;- rlang::sym(order_by)\n    gain_lift_tbl %&gt;%\n        ggplot(aes(cumulative_data_fraction, lift, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Lift\",\n             x = \"Cumulative Data Fraction\", y = \"Lift\") +\n        theme(legend.position = \"none\") \n    \n}\nget_model_metrics &lt;- function(leaderboard_tbl, order_by,  test_tbl = test_tbl) {\n  order_by_expr &lt;- rlang::sym(order_by)\n  n &lt;- nrow(leaderboard_tbl)\n  metrics_list &lt;- list()\n  \n  for (i in 1:n) {\n    model_id &lt;- leaderboard_tbl$model_id[i]\n    model_metrics &lt;- get_model_performance_metrics(model_id, test_tbl)\n    metrics_list[[i]] &lt;- model_metrics\n  }\n  \n  leaderboard_tbl$metrics &lt;- metrics_list\n  unnest(leaderboard_tbl, cols = metrics) %&gt;%\n    mutate(\n      model_id = as_factor(model_id) %&gt;% \n                  fct_reorder(!! order_by_expr, .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc      = auc %&gt;% \n                  round(3) %&gt;% \n                  as.character() %&gt;% \n                  as_factor() %&gt;% \n                  fct_reorder(as.numeric(model_id)),\n      logloss  = logloss %&gt;% \n                  round(4) %&gt;% \n                  as.character() %&gt;% \n                  as_factor() %&gt;% \n                  fct_reorder(as.numeric(model_id))\n    )\n}\n\nget_model_performance_metrics &lt;- function(model_id, test_tbl) {\n    model_h2o &lt;- h2o.getModel(model_id)\n  tst_h2o &lt;- as.h2o(test_tbl)\n  perf_h2o &lt;- h2o.performance(model_h2o, newdata = tst_h2o)\n  \n  metrics_df &lt;- perf_h2o %&gt;% h2o.metric() %&gt;% as_tibble() %&gt;%\n    select(threshold, tpr, fpr, precision, recall)\n  \n  return(metrics_df)\n}"
  }
]