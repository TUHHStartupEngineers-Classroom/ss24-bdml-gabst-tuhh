---
title: "Explaining Blackbox Models with LIME"
date: "06/20/2024"
author: "Gabriel Storch"
output: 
    html_document:
        toc: TRUE
        theme: flatly
        highlight: tango
        code_folding: hide
        df_print: paged
editor: 
  markdown: 
    wrap: 72
---

```{r}
suppressWarnings(
  {
    library(readr)
library(h2o)
library(recipes)
library(readxl)
library(tidyverse)
library(tidyquant)
library(lime)
library(rsample)
  }
)


```


```{r}
employee_attrition_readable_tbl <- read_csv("C:/Projekte/bdml/employee_data.csv")

# Split into test and train
set.seed(seed = 1113)
split_obj <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)

# Assign training and test data
train_readable_tbl <- training(split_obj)
test_readable_tbl  <- testing(split_obj)

# ML Preprocessing Recipe 
recipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%
                step_zv(all_predictors()) %>%
                step_mutate_at(c("JobLevel", "StockOptionLevel"), fn = as.factor) %>% 
                prep()

train_tbl <- bake(recipe_obj, new_data = train_readable_tbl)
test_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)


```
```{r}
#| eval: false
h2o.init()

train_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)[[1]]
valid_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)[[2]]
test_h2o  <- as.h2o(test_tbl)

response <- "Attrition"

predictors <-  setdiff(names(train_h2o), response)

automl_models_h2o <- h2o.automl(
  x = predictors,
  y = response,
  training_frame    = train_h2o,
  validation_frame  = valid_h2o,
  leaderboard_frame = test_h2o,
  nfolds            = 5,
  max_runtime_secs = 30
)
ldr <- automl_models_h2o@leader
predictions_tbl <- ldr  %>% 
    h2o.predict(newdata = as.h2o(test_tbl)) %>%
    as_tibble() %>%
    bind_cols(
        test_tbl %>%
            select(Attrition, EmployeeNumber)
    )
# to be able to plot without the h2o stuff running
write_csv(predictions_tbl, "predictions.csv")
```
```{r}
preds <- read.csv("predictions.csv")
```

```{r}
#| eval: false
explainer <- train_tbl %>%
    select(-Attrition) %>%
    lime(
        model           = ldr,
        bin_continuous  = TRUE,
        n_bins          = 4,
        quantile_bins   = TRUE
    )
```



```{r}
#| eval: false

explanation <- test_tbl %>%
    slice(1) %>%
    select(-Attrition) %>%
    lime::explain(
    
        # Pass our explainer object
        explainer = explainer,
        # Because it is a binary classification model: 1
        n_labels   = 1,
        # number of features to be returned
        n_features = 8,
        # number of localized linear models
        n_permutations = 5000,
        # Let's start with 1
        kernel_width   = 1
    )

write_csv(explanation, "explanation.csv")


explanation <- test_tbl %>%
    slice(1:20) %>%
    select(-Attrition) %>%
    lime::explain(
    
        # Pass our explainer object
        explainer = explainer,
        # Because it is a binary classification model: 1
        n_labels   = 1,
        # number of features to be returned
        n_features = 8,
        # number of localized linear models
        n_permutations = 5000,
        # Let's start with 1
        kernel_width   = 1
    )

write_csv(explanation, "explanation20.csv")
```

```{r}
explanation <- read.csv("explanation.csv")
explanation20 <- read.csv("explanation20.csv")
```


# recreate plot features 

```{r}
plot_features <- function(explanation) {
    explanation %>%
        ggplot(aes(x = reorder(feature, feature_weight), y = feature_weight)) +
        geom_bar(stat = 'identity') +
        coord_flip() +
        labs(title = "Feature Importance", x = "Feature", y = "Importance") +
        theme_minimal()
}

```

```{r}

case_1 <- explanation %>%
    filter(case == 1)

case_1 %>%
    plot_features()
```

# recreate plot explanations 
```{r}
plot_explanations <- function(explanations) {
  explanations %>%
    mutate(
      case = as.factor(case)
    ) %>%
    ggplot(aes(x = case, y = reorder(feature_desc, abs(feature_weight)), fill = feature_weight)) +
    geom_tile() +
    facet_grid(~ label) +
    scale_fill_gradient2(low = "red", high = "green", mid = "white", midpoint = 0) +
    labs(title = "Feature Importance by Case",
         x = "Case",
         y = "Feature ") +
    theme_minimal() 
    #theme(
    #  axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    #  panel.spacing = unit(1, "lines")
    #)
}
```

```{r}

explanation20 %>%
    plot_explanations()
```

